#!/usr/bin/env node
"use strict";
/*eslint-disable no-console*/

const cluster = require("cluster");
const workerCount = process.env.WORKER_COUNT || 2;

// Defines what each worker needs to run
// In this case, it's app.js a simple node http app
cluster.setupMaster({ exec: process.env.EXECUTABLE });

// Gets the count of active workers
function numWorkers() {
  return Object.keys(cluster.workers).length;
}

let stopping = false;

// Forks off the workers unless the server is stopping
function forkNewWorkers() {
  if (!stopping) {
    for (let i = numWorkers(); i < workerCount; i++) {
      let worker = cluster.fork();
      console.log("CLUSTER::CHANGE forking", worker.process.pid);
    }
  }
}

// A list of workers queued for a restart
let workersToStop = [];

// Stops a single worker
// Gives 60 seconds after disconnect before SIGTERM
function stopWorker(worker) {
  console.log("CLUSTER::CHANGE stopping", worker.process.pid);

  let killTimer = setTimeout(function() {
    worker.kill("SIGKILL");
  }, 60000);

  // Ensure we don't stay up just for this setTimeout
  worker.on("exit", function() {
    clearTimeout(killTimer);
  });

  worker.kill("SIGTERM");
}

// Tell the next worker queued to restart to disconnect
// This will allow the process to finish it's work
// for 60 seconds before sending SIGTERM
function stopNextWorker() {
  let i = workersToStop.pop();
  let worker = cluster.workers[i];
  if (worker) {
    stopWorker(worker);
  }
}

// Stops all the works at once
function stopAllWorkers() {
  stopping = true;
  console.log("CLUSTER::CHANGE stopping all workers");
  for (let id in cluster.workers) {
    stopWorker(cluster.workers[id]);
  }
}

// Worker is now listening on a port
// Once it is ready, we can signal the next worker to restart
cluster.on("listening", stopNextWorker);

// A worker has disconnected either because the process was killed
// or we are processing the workersToStop array restarting each process
// In either case, we will fork any workers needed
cluster.on("disconnect", forkNewWorkers);

// HUP signal sent to the master process to start restarting all the workers sequentially
process.on("SIGHUP", function() {
  console.log("CLUSTER::CHANGE restarting all workers");
  workersToStop = Object.keys(cluster.workers);
  stopNextWorker();
});

// Kill all the workers at once
process.on("SIGTERM", stopAllWorkers);

// Fork off the initial workers
console.log("CLUSTER::CHANGE app master", process.pid, "booted");
forkNewWorkers();
